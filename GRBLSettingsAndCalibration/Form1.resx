<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbTriangle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>